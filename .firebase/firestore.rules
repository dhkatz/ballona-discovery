rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function hasOnly(newResource, oldResource, fields) {
		return newResource.data.diff(oldResource.data).affectedKeys().hasOnly(fields);
	}

	function hasAll(resource, fields) {
		return resource.data.keys().hasAll(fields);
	}

	function isAuthed() {
		return request.auth != null;
	}

	function isOwner(auth, id) {
  		return isAuthed() && resource != null && auth.uid == id;
	}

	function isAdmin(auth) {
		return isAuthed() && auth.token.role == "admin";
	}

	match /users/{userId} {
		allow read: if isAuthed(); // if isOwner(request.auth, resource.id) || isAdmin(request.auth);
		allow update: if isAuthed(); // if resource.id != "admin" && (isOwner(request.auth, resource.id) || isAdmin(request.auth));
	}

	match /roles/{roleId} {
		allow read: if isAuthed();
		allow write: if isAuthed(); // if resource.id != "admin" && isAdmin(request.auth);
	}
  }
}
